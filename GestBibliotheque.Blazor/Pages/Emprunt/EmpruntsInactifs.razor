@page "/Emprunt/EmpruntsInactifs"
@using GestBibliotheque.Blazor.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@using CommonLib.GestBibliotheque.Utilitaires

<h2 class="mb-4">Liste des Emprunts Inactifs</h2>

@if (empruntsInactifs == null)
{
    @* <p class="alert alert-warning">Chargement des emprunts inactifs...</p> *@
    <div class="alert alert-warning d-flex align-items-center">
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        Chargement des données en cours...
    </div>
}
else if (!empruntsInactifs.Any())
{
    <p class="alert alert-info">Aucun emprunt inactif trouvé.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered">
            <thead>
                <tr>
                    <th>Nom &amp; Prénoms</th>
                    <th>Titre du Livre</th>
                    <th>Date d'emprunt</th>
                    <th>Date de retour prévue</th>
                    <th>Date de retour effective</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var emprunt in PagedempruntsInactifs)
                {
                    <tr>
                        <td>@emprunt.NomCompletUsager</td>
                        <td>@emprunt.TitreLivre</td>
                        <td>@emprunt.DateDebut.ToString("yyyy-MM-dd")</td>
                        <td>@emprunt.DateRetourPrevue.ToString("yyyy-MM-dd")</td>
                        <td>@(emprunt.DateRetour.HasValue && emprunt.DateRetour.Value != DateTime.MinValue ? emprunt.DateRetour.Value.ToString("yyyy-MM-dd") : "-")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav>
        <ul class="pagination">
            <li class="page-item @(currentPageInactif == 1 ? "disabled" : "")">
                <a class="page-link" @onclick="PreviousPageInactif">Précédent</a>
            </li>
            @for (int i = 1; i <= totalPagesInactif; i++)
            {
                <li class="page-item @(currentPageInactif == i ? "active" : "")">
                    <a class="page-link" @onclick="() => GoToPageInactif(i)">@i</a>
                </li>
            }
            <li class="page-item @(currentPageInactif == totalPagesInactif ? "disabled" : "")">
                <a class="page-link" @onclick="NextPageInactif">Suivant</a>
            </li>
        </ul>
    </nav>
}

<div class="mt-3">
    <button class="btn btn-primary ms-2" @onclick="RetourListe">Retour à la liste principale</button>
</div>

@code {
    private List<EmpruntDto> empruntsInactifs = new();

    private int currentPageInactif = 1;
    private int pageSizeInactif = 8;
    private int totalPagesInactif => empruntsInactifs.Count > 0 ? (int)Math.Ceiling(empruntsInactifs.Count / (double)pageSizeInactif) : 1;
    private IEnumerable<EmpruntDto> PagedempruntsInactifs => empruntsInactifs
        .Skip((currentPageInactif - 1) * pageSizeInactif)
        .Take(pageSizeInactif);

    private string? Message;
    private bool Success;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmpruntsInactifs();
    }

    private async Task LoadEmpruntsInactifs()
    {
        try
        {
            var emprunts = await Http.GetFromJsonAsync<List<EmpruntDto>>("/api-bibliotheque/emprunts");
            if (emprunts != null)
            {
                empruntsInactifs = emprunts.Where(e => e.EstRendu).ToList();
                currentPageInactif = 1;
            }
        }
        catch (Exception ex)
        {
            Message = GestionErreurs.GererErreur(ex);
            Success = false;
        }
    }

    private void PreviousPageInactif()
    {
        if (currentPageInactif > 1)
        {
            currentPageInactif--;
        }
    }

    private void NextPageInactif()
    {
        if (currentPageInactif < totalPagesInactif)
        {
            currentPageInactif++;
        }
    }

    private void GoToPageInactif(int page)
    {
        if (page >= 1 && page <= totalPagesInactif)
        {
            currentPageInactif = page;
        }
    }

    private void RetourListe()
    {
        Navigation.NavigateTo("/Emprunt/emprunts");
    }
}