@page "/Operation/LivresDisponible"
@inject HttpClient Http
@using GestBibliotheque.Blazor.Models

<h3 class="mb-3">Liste des Livres Disponibles</h3>

<div class="mb-3">
    <label for="searchLivre" class="form-label">Rechercher un livre :</label>
    <input id="searchLivre" @bind="searchTerm" @bind:event="oninput" class="form-control" placeholder="Rechercher par titre ou auteur..." />
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(Success ? "alert-success" : "alert-danger")">@Message</div>
}

@if (isLoading)
{
    <div class="alert alert-warning d-flex align-items-center">
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        Chargement des données en cours...
    </div>
}
else if (!PagedFilteredLivres.Any())
{
    <p class="alert alert-info">Aucun livre disponible trouvé.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Titre</th>
                    <th>Auteur</th>
                    <th>Catégorie</th>
                    <th>Stock</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var livre in PagedFilteredLivres)
                {
                    <tr>
                        <td>@livre.Titre</td>
                        <td>@livre.Auteur</td>
                        <td>@livre.Libelle</td>
                        <td>@livre.Stock</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav>
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a class="page-link" @onclick="PreviousPage">Précédent</a>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <a class="page-link" @onclick="() => GoToPage(i)">@i</a>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a class="page-link" @onclick="NextPage">Suivant</a>
            </li>
        </ul>
    </nav>
}
@code {
    private List<LivreDto> livres = new();
    private List<LivreDto> PagedFilteredLivres => FilteredLivres
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

    private string searchTerm = string.Empty;
    private bool isLoading = true;
    private string? Message;
    private bool Success;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling(FilteredLivres.Count / (double)pageSize);

    private List<LivreDto> FilteredLivres => string.IsNullOrWhiteSpace(searchTerm)
        ? livres
        : livres.Where(l =>
            l.Titre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            l.Auteur.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            livres = await Http.GetFromJsonAsync<List<LivreDto>>("/api-bibliotheque/operation/disponible");
        }
        catch (Exception ex)
        {
            Message = $"Erreur lors du chargement des livres : {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }
}