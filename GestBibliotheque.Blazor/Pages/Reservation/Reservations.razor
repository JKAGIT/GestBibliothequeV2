@page "/Reservation/reservations"
@using GestBibliotheque.Blazor.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using CommonLib.GestBibliotheque.Utilitaires

<h3 class="text-center mb-4">Gestion des Réservations</h3>

<div class="mb-3">
    <a href="/Reservation/Ajout-Reservations" class="btn btn-primary">Ajouter une Réservation</a>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(Success ? "alert-success" : "alert-danger")">@Message</div>
}

@if (Loading)
{
    <div class="alert alert-warning d-flex align-items-center">
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        Chargement des données en cours...
    </div>
}
else if (reservations == null)
{
    <p class="alert alert-danger">Erreur lors du chargement des réservations.</p>
}
else if (!reservations.Any())
{
    <p class="alert alert-info">Aucune réservation disponible.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered">
            <thead>
                <tr>
                    <th>Nom &amp; Prénoms</th>
                    <th>Livre</th>
                    <th>Date Début</th>
                    <th>Date Retour Estimée</th>
                    <th>Livre dispo?</th>
                    <th>Statut</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reservation in PagedReservations)
                {
                    <tr>
                        <td>@reservation.NomCompletUsager</td>
                        <td>@reservation.TitreLivre</td>
                        <td>@reservation.DateDebut.ToString("yyyy-MM-dd")</td>
                        <td>@reservation.DateRetourEstimee.ToString("yyyy-MM-dd")</td>
                        <td>@reservation.LivreDisponible</td>
                        <td>
                            @if (reservation.StatutReservation != "Annulée")
                            {
                                <span style="color:@(reservation.StatutReservation == "En retard" ? "red" : "green");">
                                    @reservation.StatutReservation
                                </span>
                            }
                        </td>
                        <td>
                            <a href="/Reservation/Modifier-Reservations/@reservation.ID" class="btn btn-primary btn-sm me-2">Modifier</a>
                            <a href="/Reservation/Emprunt-Reservations/@reservation.ID" class="btn btn-info btn-sm me-2">Emprunter</a>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmerAnnulation(reservation.ID)">Annuler</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav>
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a class="page-link" @onclick="PrevPage">Précédent</a>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <a class="page-link" @onclick="() => GoToPage(i)">@i</a>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a class="page-link" @onclick="NextPage">Suivant</a>
            </li>
        </ul>
    </nav>
}
@code {
    private List<ReservationDto> reservations = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private string? Message;
    private bool Success;
    private bool Loading = true;
    private int totalPages => (reservations.Count > 0)
        ? (int)Math.Ceiling(reservations.Count / (double)pageSize)
        : 1;

    private IEnumerable<ReservationDto> PagedReservations => reservations
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        await ChargerReservations();
    }

    private async Task ChargerReservations()
    {
        Loading = true;
        try
        {
            reservations = await Http.GetFromJsonAsync<List<ReservationDto>>("/api-bibliotheque/reservation");
            reservations = reservations.Where(r => !r.Annuler && !r.EstEmprunte).ToList();
            currentPage = 1;
            Success = true;
        }
        catch (Exception ex)
        {
            reservations = null;
            Message = $"Erreur : {ex.Message}";
            Success = false;
        }
        finally
        {
            Loading = false;
        }
    }

    private void PrevPage() { if (currentPage > 1) currentPage--; }
    private void NextPage() { if (currentPage < totalPages) currentPage++; }
    private void GoToPage(int page) { if (page >= 1 && page <= totalPages) currentPage = page; }

    private async Task ConfirmerAnnulation(Guid id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir annuler cette réservation ?"))
        {
            await AnnulerReservation(id);
        }
    }

    private async Task AnnulerReservation(Guid id)
    {
        try
        {
            var response = await Http.PutAsync($"/api-bibliotheque/reservation/annuler/{id}", null);
            if (response.IsSuccessStatusCode)
            {
                Message = "Réservation annulée avec succès.";
                Success = true;
                await ChargerReservations();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Message = $"Échec de l'annulation : {errorContent}";
                Success = false;
            }
        }
        catch (Exception ex)
        {
            Message = $"Erreur lors de l'annulation : {ex.Message}";
            Success = false;
        }
    }
}